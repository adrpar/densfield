#!/bin/sh

# Copyright (C) 2010, Steffen Knollmann
# Released under the terms of the GNU General Public License version 3.

# Get aroud the $ECHO quirks
ECHO=/bin/echo

# Get a bunch of informative things
if test -e version.h
then
	PROPER_VERSION_INFO="yes"
	VERSIONFILE=version.h
else
	PROPER_VERSION_INFO="no"
	VERSIONFILE=version.h.in
fi
PACKAGE_NAME=`  grep 'define PACKAGE_NAME' $VERSIONFILE \
              | awk '{print $3}' | sed s/\"//g`
PACKAGE_OWNER=`  grep 'define PACKAGE_OWNER' $VERSIONFILE \
              | awk -F\" '{print $2}'`
PACKAGE_BUG_EMAIL=`  grep 'define PACKAGE_BUG_EMAIL' $VERSIONFILE \
                   | awk '{print $3}' | sed s/\"//g`
PACKAGE_VERSION_MAJOR=`  grep 'define PACKAGE_VERSION_MAJOR' $VERSIONFILE \
                       | awk '{print $3}' | sed s/\"//g`
PACKAGE_VERSION_MINOR=`  grep 'define PACKAGE_VERSION_MINOR' $VERSIONFILE \
                       | awk '{print $3}' | sed s/\"//g`
PACKAGE_VERSION_MICRO=`  grep 'define PACKAGE_VERSION_MICRO' $VERSIONFILE \
                       | awk '{print $3}' | sed s/\"//g`
PACKAGE_COPYRIGHT_YEAR="`  grep 'define PACKAGE_COPYRIGHT_YEAR' $VERSIONFILE \
                       | awk -F\\\" '{print $2}'`"

# Initialise the options
TOOLCHAIN=gnu
WITH_OPENMP=false
WITH_MAPPING_SPH=false
WITH_MAPPING_CIC=false
ENABLE_FORTRAN_RECORDS=true
ENABLE_DOUBLE=false
ENABLE_DEBUG=false
ENABLE_PROFILE=false
SHOW_HELP=false
SHOW_VERSION=false
NDIM_VALUE=3
MAXBASESIZE_VALUE=55
SPHKERNELSIZESMALL_VALUE=3
SPHKERNELSIZEMEDIUM_VALUE=7
SPHKERNELSIZEBIG_VALUE=15
SPHKERNEL_SUBSAMPLING_VALUE=8
GRID_UNDEFINED_VALUE_USERDEFINED=false
GRID_UNDEFINED_VALUE=0.0

# Parse the options
for ac_option
do
	case $ac_option in
		*=*)  ac_optarg=`expr "X$ac_option" : '[^=]*=\(.*\)'` ;;
		*)    ac_optarg=yes ;;
	esac

	case $ac_option in
		--toolchain)
			$$ECHO -n "Error: --toolchain requires an argument; "
			$ECHO "use, e.g., --toolchain=gnu"
			exit 1
			;;
		--toolchain=*)
			TOOLCHAIN=$ac_optarg
			;;
		# Check for OpenMP
		--with-openmp | --with-openmp=*)
			if test "x$ac_optarg" = "xyes"
			then
				WITH_OPENMP=true
			else
				WITH_OPENMP=false
			fi
			;;
		--without-openmp)
			WITH_OPENMP=false
			;;
		# Check for SPH mapping of gas particles
		--with-mapping-sph | --with-mapping-sph=*)
			if test "x$ac_optarg" = "xyes"
			then
				WITH_MAPPING_SPH=true
			else
				WITH_MAPPING_SPH=false
			fi
			;;
		 --without-mapping-sph)
			WITH_MAPPING_SPH=false
			;;
		# Check if CIC should be used instead of TSC
		--with-mapping-cic | --with-mapping-cic=*)
			if test "x$ac_optarg" = "xyes"
			then
				WITH_MAPPING_CIC=true
			else
				WITH_MAPPING_CIC=false
			fi
			;;
		 --without-mapping-sph)
			WITH_MAPPING_CIC=false
			;;
		# Toggle the usage of Fortran record delimiters
		--enable-fortran-records | --enable-fortran-records=*)
			if test "x$ac_optarg" = "xyes"
			then
				ENABLE_FORTRAN_RECORDS=true
			else
				ENABLE_FORTRAN_RECORDS=false
			fi
			;;
		--disable-fortran-records)
			ENABLE_FORTRAN_RECORDS=false
			;;
		# Change fields to use double instead of float
		--enable-double | --enable-double=*)
			if test "x$ac_optarg" = "xyes"
			then
				ENABLE_DOUBLE=true
			else
				ENABLE_DOUBLE=false
			fi
			;;
		--disable-double | --disable-double=*)
			ENABLE_DOUBLE=false
			;;
		# Switch on debugging
		--enable-debug | --enable-debug=*)
			if test "x$ac_optarg" = "xyes"
			then
				ENABLE_DEBUG=true
			else
				ENABLE_DEBUG=false
			fi
			;;
		--disable-debug | --disable-debug=*)
			ENABLE_DEBUG=false
			;;
		# Switch on profiling 
		--enable-profile | --enable-profile=*)
			if test "x$ac_optarg" = "xyes"
			then
				ENABLE_PROFILE=true
			else
				ENABLE_PROFILE=false
			fi
			;;
		--disable-profile | --disable-debug=*)
			ENABLE_PROFILE=false
			;;
		# Constants
		--ndim)
			$ECHO -n "Error:  --ndim requires an argument."
			exit 1
			;;
		--ndim=*)
			if test "x$ac_optarg" = "x3"
			then
				NDIM_VALUE=3
			else
				$ECHO -n "Error:  --ndim accepts only 3 as argument."
				exit 1
			fi
			;;
		--maxbasesize)
			$ECHO -n "Error:  --maxbasesize requires an argument."
			exit 1
			;;
		--maxbasesize=*)
			MAXBASESIZE_VALUE=$ac_optarg
			;;
		--sphkernelsizesmall)
			$ECHO -n "Error:  --sphkernelsizesmall requires an argument."
			exit 1
			;;
		--sphkernelsizesmall=*)
			SPHKERNELSIZESMALL_VALUE=$ac_optarg
			;;
		--sphkernelsizemedium)
			$ECHO -n "Error:  --sphkernelsizemedium requires an argument."
			exit 1
			;;
		--sphkernelsizemedium=*)
			SPHKERNELSIZEMEDIUM_VALUE=$ac_optarg
			;;
		--sphkernelsizebig)
			$ECHO -n "Error:  --sphkernelsizebig requires an argument."
			exit 1
			;;
		--sphkernelsizebig=*)
			SPHKERNELSIZEBIG_VALUE=$ac_optarg
			;;
		--sphkernel-subsampling)
			 $ECHO -n "Error:  --sphkernel-subsampling requires an argument."
			exit 1
			;;
		--sphkernel-subsampling=*)
			SPHKERNEL_SUBSAMPLING_VALUE=$ac_optarg
			;;
		--grid-undefined-value=)
			 $ECHO -n "Error:  --grid-undefined-value requires an argument."
			exit 1
			;;
		--grid-undefined-value=*)
			GRID_UNDEFINED_VALUE_USERDEFINED=true
			GRID_UNDEFINED_VALUE=$ac_optarg
			;;
		# Various
		-h | --help*)
			SHOW_HELP=true
			;;
		-V | --version*)
			SHOW_VERSION=true
			;;
		-* | --*)
			$ECHO "Unknown option $ac_option."
			$ECHO "Try \`$0 --help' to get a list of allowed options."
			exit 1
			;;
		*)
			$ECHO "Unknown parameter $ac_option"
			$ECHO "Try \`$0 --help' to get a list of allowed options."
			exit 1
			;;
	esac
done

# Print the help screen and exit, if requested
if test "x$SHOW_HELP" = "xtrue"
then
	cat <<_HELP_EOF
\`configure' offers an easy way to configure the features and the build
system of $PACKAGE_NAME $PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_MICRO.

This script will use the distributed Makefile.config.in and config.h.in
to generate the actual Makefile.config and config.h, respectively.

Usage: $0 [OPTION]... [VAR=VALUE]

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help      Print this help screen.
  -V, --version   Print a version info and exit.

Build options:
  --toolchain[=TOOLCHAIN]  Sets the toolchain used to build $PACKAGE_NAME.
                           This defaults to \`gnu', using gcc, ld and ar.
                           Another option is to specify \`intel', then
                           icc, xild and xiar are used in the toolchain.
                           You can define further toolchains by
                           modifying Makefile.config.in accordingly.
                           Please note the comment at the end of this
                           help screen concerning environment variables.

Optional features:
  --with-FEATURE[=ARG]  Use FEATURE. [ARG=yes]
  --without-FEATURE     Do not use FEATURE.  This is the same as
                        --with-FEATURE=no.
  --with-openmp         Uses the OpenMP directives.  Default: no.
  --with-mapping-cic    If this is used, the standard TSC mapping is
                        replaced by a CIC mapping.  Default: no
                        (using TSC).
  --with-mapping-sph    This will use a more accurate treatment
                        of gas particles, i.e. their properties will
                        be mapped using the SPH kernel.  Default: no.

Code properties:
  --enable-FEATURE[=ARG]    Switch on a feature. [ARG=YES]
  --disable-FEATURE         Do not use FEATURE.  This is the same as
                            --enable-FEATURE=no.
  --enable-fortran-records  Using this will write proper Fortran records
                            instead of simple C blocks.  This means that
                            before and after every data block a 4 byte
                            blocklength will be written.  Default: yes.
  --enable-double           This switches on the usage of double
                            precision floating point variables instead
                            of single precision for fields and particle
                            properties.  Default: No.

Extra features:
  --enable-debug                 Activates the debugging flags and
                                 forces the compiler flags to build 
                                 debugging symbols.  Default: no.
  --enable-profile               Will built the code with profiling
                                 output for usage with performance
                                 analysis tools.  Default: no.
  --ndim=VALUE                   Sets the dimensionality of the code.
                                 Only allowed value is 3 at the moment.
                                 Default: 3.
  --maxbasesize=VALUE            Sets the maximal extend of the particle
                                 assignment (for SPH mapping).  Default: 55.
  --sphkernelsizesmall=VALUE     Size for the smallest SPH Kernel sampling.
                                 Default: 3.
  --sphkernelsizemedium=VALUE    Size of the medium SPH Kernel sampling.
                                 Default: 7.
  --sphkernelsizebig=VALUE       Size of the largest SPH Kernel sampling.
                                 Default: 15.
  --sphkernel-subsampling=VALUE  Number of subsamples used to calculate
                                 the SPH kernel bins. Default: 8.
  --grid-undefined-value=VALUE   If an undefined value occurs in the
                                 grid use VALUE to represent it.  This
                                 can happen for velocity fields in cells
                                 than receive no contribution from any
                                 particle (oversampled fields).  The
                                 default is to represent the undefined
                                 value with NaN, but that might confuse
                                 analysis tools, so you may specify
                                 another value to use instead.  VALUE
                                 must be a floating point value and most
                                 likely you want 0.0.
                                 Default: NaN.

Some influential environment variables:
  CC          The C compiler to use.
  CFLAGS      C compiler flags.
  CPPFLAGS    Additional directives for the preprocessor, e.g.
              \`-L/opt/include'
  DEPCC       This is the C preprocessor that will be used to
              auto-generate dependencies.  No code will be generated
              with that compiler!
  LD          The linker.
  LDFLAGS     Flags required to find libraries, e.g. \`-L/opt/lib'
  AR          The archiver.
  MAKE        The make command that will be used.

Note that theses variables are set by selecting a specific toolchain.
You can use these variables to override the choices made by \`configure'
or to help it to find libraries and programs with nonstandard
names/locations.

Please report bugs to $PACKAGE_BUG_EMAIL.

_HELP_EOF
	exit 0
fi

# Print the version screen and exit, if requested
if test "x$SHOW_VERSION" = "xtrue"
then
	cat <<_VERSION_EOF
This is $PACKAGE_NAME $PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_MICRO
Copyright (C) $PACKAGE_COPYRIGHT_YEAR, $PACKAGE_OWNER

This is free software; see the attached COPYING document for copying
conditions.  There is NO warranty; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PUSPOSE.

Please send bugreports to $PACKAGE_BUG_EMAIL

_VERSION_EOF
	exit 0
fi

# Now set all the (possibly) deferred libaries

# Now lets actually do something.

# Say hello
$ECHO "Configuring $PACKAGE_NAME $PACKAGE_VERSION_MAJOR.$PACKAGE_VERSION_MINOR.$PACKAGE_VERSION_MICRO" | tee config.log

# Generate Makefile.config
$ECHO -ne "\to generating \`Makefile.config'... " | tee -a config.log
$ECHO "# Makefile.config generated from Makefile.config.in by configure" > Makefile.config
$ECHO "" >> Makefile.config
cat Makefile.config.in >> Makefile.config
sed -i.bak s/__TOOLCHAIN__/$TOOLCHAIN/ Makefile.config
if test "x$WITH_OPENMP" = "xtrue"
then
	sed -i.bak s/__WITH_OPENMP__/true/ Makefile.config
else
	sed -i.bak s/__WITH_OPENMP__/false/ Makefile.config
fi
if test "x$ENABLE_DEBUG" = "xtrue"
then
	sed -i.bak s/__ENABLE_DEBUG__/true/ Makefile.config
else
	sed -i.bak s/__ENABLE_DEBUG__/false/ Makefile.config
fi
if test "x$ENABLE_DOUBLE" = "xtrue"
then
	sed -i.bak s/__ENABLE_DOUBLE__/true/ Makefile.config
else
	sed -i.bak s/__ENABLE_DOUBLE__/false/ Makefile.config
fi
if test "x$ENABLE_PROFILE" = "xtrue"
then
	sed -i.bak s/__ENABLE_PROFILE__/true/ Makefile.config
else
	sed -i.bak s/__ENABLE_PROFILE__/false/ Makefile.config
fi
sed -i.bak -e "s@__CC__@$CC@" Makefile.config
sed -i.bak -e "s@__CFLAGS__@$CFLAGS@" Makefile.config
sed -i.bak -e "s@__CPPFLAGS__@$CPPFLAGS@" Makefile.config
sed -i.bak -e "s@__DEPCC__@$DEPCC@" Makefile.config
sed -i.bak -e "s@__LD__@$LD@" Makefile.config
sed -i.bak -e "s@__LDFLAGS__@$LDFLAGS@" Makefile.config
sed -i.bak -e "s@__AR__@$AR@" Makefile.config
sed -i.bak -e "s@__MAKE__@$MAKE@" Makefile.config
$ECHO "done" | tee -a config.log
rm -f Makefile.config.bak


# Generate config.h
$ECHO -ne "\to generating \`config.h'... " | tee -a config.log
$ECHO "/* config.h generated from config.h.in by configure */" > config.h
$ECHO "" >> config.h
cat config.h.in >> config.h
if test "x$WITH_OPENMP" = "xtrue"
then
	sed -i.bak -e 's/undef WITH_OPENMP/define WITH_OPENMP 1/' config.h
fi
if test "x$WITH_MAPPING_SPH" = "xtrue"
then
	sed -i.bak -e 's/undef WITH_MAPPING_SPH/define WITH_MAPPING_SPH 1/' config.h
fi
if test "x$WITH_MAPPING_CIC" = "xtrue"
then
	sed -i.bak -e 's/undef WITH_MAPPING_CIC/define WITH_MAPPING_CIC 1/' config.h
fi
if test "x$ENABLE_FORTRAN_RECORDS" = "xtrue"
then
	sed -i.bak -e 's/undef ENABLE_FORTRAN_RECORDS/define ENABLE_FORTRAN_RECORDS 1/' config.h
fi
if test "x$ENABLE_DOUBLE" = "xtrue"
then
	sed -i.bak -e 's/undef ENABLE_DOUBLE/define ENABLE_DOUBLE 1/' config.h
fi
if test "x$ENABLE_DEBUG" = "xtrue"
then
	sed -i.bak -e 's/undef ENABLE_DEBUG/define ENABLE_DEBUG 1/' config.h
fi
sed -i.bak -e "s@__NDIM_VALUE__@$NDIM_VALUE@" config.h
sed -i.bak -e "s@__MAXBASESIZE_VALUE__@$MAXBASESIZE_VALUE@" config.h
sed -i.bak -e "s@__SPHKERNELSIZESMALL_VALUE__@$SPHKERNELSIZESMALL_VALUE@" config.h
sed -i.bak -e "s@__SPHKERNELSIZEMEDIUM_VALUE__@$SPHKERNELSIZEMEDIUM_VALUE@" config.h
sed -i.bak -e "s@__SPHKERNELSIZEBIG_VALUE__@$SPHKERNELSIZEBIG_VALUE@" config.h
sed -i.bak -e "s@__SPHKERNEL_SUBSAMPLING_VALUE__@$SPHKERNEL_SUBSAMPLING_VALUE@" config.h
if test "x$GRID_UNDEFINED_VALUE_USERDEFINED" = "xtrue"
then
	sed -i.bak -e 's/undef GRID_UNDEFINED_VALUE/define GRID_UNDEFINED_VALUE __GRID_UNDEFINED_VALUE__/' config.h
	sed.bak -i -e "s@__GRID_UNDEFINED_VALUE__@$GRID_UNDEFINED_VALUE@" config.h
fi
$ECHO "done" | tee -a config.log
rm -f config.h.bak


# Summarize the configuration
$ECHO "" | tee -a config.log
$ECHO "Summary" | tee -a config.log
$ECHO -e "\to features in use/code properties:" | tee -a config.log
grep '#define' config.h \
	| grep -v CONFIG_H \
	| awk '{print "\t\t"$2"\t"$3}' \
	| tee -a config.log

$ECHO -e "\to features NOT in use:" | tee -a config.log
grep '#undef' config.h | awk '{print "\t\t"$2}' | tee -a config.log

$ECHO -e "\to programs and program options:" | tee -a config.log
cat <<_BLA_EOF >> bla.$$
include Makefile.config

.PHONY: check

check:
	@$ECHO -e "\t\tCC       = \$(CC)"
	@$ECHO -e "\t\tCFLAGS   = \$(CFLAGS)"
	@$ECHO -e "\t\tCPPFLAGS = \$(CPPFLAGS)"
	@$ECHO -e "\t\tDEPCC    = \$(DEPCC)"
	@$ECHO -e "\t\tLD       = \$(LD)"
	@$ECHO -e "\t\tLDFLAGS  = \$(LDFLAGS)"
	@$ECHO -e "\t\tLIBS     = \$(LIBS)"
	@$ECHO -e "\t\tAR       = \$(AR)"
	@$ECHO -e "\t\tMAKE     = \$(MAKE)"
_BLA_EOF
make -f bla.$$ check | tee -a config.log
rm -f bla.$$
$ECHO ""
cat <<_END_EOF
To build $PACKAGE_NAME, run \`make all'.
To generate the code documention execute \`make doc'.

Have a lot of fun!
_END_EOF
