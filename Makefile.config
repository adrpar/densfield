# Makefile.config generated from Makefile.config.in by configure

# Copyright (C) 2009, 2010, Steffen Knollmann
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


# Select the used toolchain to generate the objects, executables, etc.
# You can select a variety of predefined toolchains (see the end of the
# comment for a list), but you can also define your own name, provided
# that you implement it accordingly at the end of this file.  The
# toolchain will set the following variables:
#   CC    :  This is the C compiler to use.
#   CFLAGS:  Special flags for the C compiler can be set here.
#   DEPCC:   This is a C Preprocessor that will be used to
#            auto-generate dependencies, it is a safe bet to use gcc
#            for that.  No code will be generated with that compiler!
#   LD   :   The linker.
#   AR   :   The archiver.
#   MAKE :   The make command that will be used.
# Note that by defining any of those variables during the run of the
# configure script, the toolchain variables will be overwritten with the
# command line variables.  The exception to this is CFLAGS: the user
# can specify specific flags and the ones required by the toolchain will
# be appended to those at the end.
TOOLCHAIN = "gnu"

# Features that influence the choices need to be made in the toolchains
WITH_OPENMP = "false"
WITH_MPI = "__WITH_MPI__"
ENABLE_DEBUG = "false"
ENABLE_DOUBLE = "false"
ENABLE_PROFILE = "false"

# Set the important variables to what the user wishes.  If any of these
# is set, the toolchain segment will not touch its value.  The exception
# is CFLAGS, here the toolchain will append the toolchain-specifc values
# to the ones the user specified.  Also, if the user specified any
# directory for the libraries then the according things are added to
# CPPFLAGS and LDFLAGS.
CC = 
CFLAGS = 
CPPFLAGS = 
DEPCC = 
LD = 
LDFLAGS = 
AR = 
MAKE = 

# Do all the libraries
LIBS =
LIBS += -lm

# Verify that we have a bona fide toolchain
# This is probably not the best way to do it though, first of all it
# looks ugly and second of all it uses gnu as a fall-back.
ifneq ($(TOOLCHAIN), "gnu")
  ifneq ($(TOOLCHAIN), "intel")
    ifneq ($(TOOLCHAIN), "ibm")
      TOOLCHAIN="gnu"
    endif
  endif
endif

# The actual definitions depending on the chosen toolchain
ifeq ($(TOOLCHAIN), "gnu")
  ifndef CC
    CC = gcc
  endif
  ifeq ($(WITH_OPENMP), "true")
    CC+= -fopenmp
  endif
  CFLAGS += -Wall -std=c99
  ifeq ($(ENABLE_DEBUG), "true")
    CFLAGS += -O0 -g
  endif
  ifeq ($(ENABLE_PROFILE), "true")
    CFLAGS += -pg
  endif
  ifndef DEPCC
    DEPCC = gcc
  endif
  ifndef LD
    LD = ld
  endif
  ifndef AR
    AR = ar
  endif
  ifndef MAKE
    MAKE = make
  endif
endif

ifeq ($(TOOLCHAIN), "intel")
  ifndef CC
    CC = icc
  endif
  ifeq ($(WITH_OPENMP), "true")
    CC+= -openmp
  endif
  CFLAGS += -Wall -std=c99 -Wcheck -wd981 -wd161
  ifeq ($(ENABLE_DEBUG), "true")
    CFLAGS += -O0 -g
  endif
  ifeq ($(ENABLE_PROFILE), "true")
    CFLAGS += -p
  endif
  ifndef DEPCC
    DEPCC = icc
  endif
  ifndef LD
    LD = xild
  endif
  ifndef AR
    AR = xiar
  endif
  ifndef MAKE
    MAKE = make
  endif
endif

ifeq ($(TOOLCHAIN), "ibm")
  ifndef CC
    CC = xlc
  endif
  ifeq ($(WITH_OPENMP), "true")
    CC += -qsmp=omp -qthreaded
  else
    CC += -qsmp=noomp -qthreaded
  endif
  CFLAGS += -qlanglvl=stdc99
  ifeq ($(ENABLE_DEBUG), "true")
    CFLAGS += -O0 -g
  endif
  ifeq ($(ENABLE_PROFILE), "true")
    CFLAGS += -pg
  endif
  ifndef DEPCC
      # Always use gcc for this, xlc might need different flags to do
      # the same job.
      DEPCC = gcc
  endif
  ifndef LD
    LD = ld
  endif
  ifndef AR
    AR = ar
  endif
  ifndef MAKE
    MAKE = make
  endif
endif
